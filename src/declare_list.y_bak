%{
	#include <stdio.h>
	int yylex();
	int yyparse();
	FILE *yyin;
	FILE *yyout;
	int lines;

	// Se usan en el analisis lexico para almacenar los tokens y sus respectivos valores.
	char *stToken[1024];
	char *stValue[1024];
	int stID ;

	// Se usa en el analisis sintactico para almacenar los niveles y los simbolos encontrados
	struct s_treeLevel;
	struct s_token {
		char *name;
		int no_terminal;
		int level_ref;
	};
	struct s_treeLevel {
		int level;
		int cant_tokens;
		struct s_token token[128];
	} treeLevel[1024];
	int tLevel = 0;
	int tID = 0;
	int found_errors = 0;

	char *error[128];
%}

%union {
	int val;
	float f;
	char *text;
};

%token <text> T_STRING
%token <text> T_ARRAY
%token <text> T_CLASS
%token <text> T_FUNC
%token <text> T_METHOD
%token <text> T_LINE
%token <text> T_FILE
%token <text> T_LNUMBER
%token <text> T_DNUMBER
%token <text> T_CONSTANT_ENCAPSED_STRING
%token <text> T_DOUBLE_TWO_POINTS
%token <text> T_DOUBLE_ARROW
%token T_END

%type <text> static_scalar
%type <text> common_scalar
%type <text> static_array_pair_list
%type <text> static_class_constant
%type <text> static_array_pair

%start declare_list

%%

declare_list:
		T_STRING '=' static_scalar { addT("T_STRING"); addT("="); addNT("static_scalar"); addLevel(); }
	|	T_STRING '=' static_scalar T_END { addT("T_STRING"); addT("="); addNT("static_scalar"); addT("T_END"); return 0; }		
	|	declare_list ',' T_STRING '=' static_scalar { addNT("declare_list"); addT(","); addT("T_STRING"); addT("="); addNT("static_scalar"); addLevel(); }
	|	declare_list ',' T_STRING '=' static_scalar T_END { addNT("declare_list"); addT(","); addT("T_STRING"); addT("="); addNT("static_scalar"); addT("T_END"); return 0; }
	
	/*Reconocimiento de ERRORES más frecuentes desde aqui*/
	|  	T_STRING { addE("Formato: T_STRING = static_scalar. Solo se encontro T_STRING."); }
	|  	static_scalar { addE("Formato: T_STRING = static_scalar. Solo se encontro static_scalar."); }
	|  	'=' { addE("Formato: T_STRING = static_scalar. Solo se encontro '='."); }
	|  	'=' T_END { addE("Formato: T_STRING = static_scalar"); }
	|  	'=' static_scalar { addE("Falta T_STRING antes del '='."); }
	|  	'=' static_scalar T_END { addE("Falta T_STRING antes del '='."); return 0; }
	|	T_STRING '=' { addE("Falta static_scalar despues del '='."); }
	|	T_STRING '=' T_END { addE("Falta static_scalar despues del '='."); return 0; }
	|	static_scalar '=' static_scalar { addE("Se esperaba T_STRING,y no static_scalar, antes del '='. Formato: T_STRING = static_scalar"); }
	|	static_scalar '=' static_scalar T_END { addE("Se esperaba T_STRING,y no static_scalar, antes del '='. Formato: T_STRING = static_scalar"); return 0; }
	|	declare_list T_STRING '=' static_scalar { addE("Se esperaba una ',' antes de T_STRING"); }
	|	declare_list T_STRING '=' static_scalar T_END { addE("Se esperaba una ',' antes de T_STRING"); return 0; }
	|	declare_list ',' T_STRING '=' { addE("Falta static_scalar despues del '='."); }
	|	declare_list ',' T_STRING '=' T_END { addE("Falta static_scalar despues del '='."); return 0; }
	|	declare_list ',' T_STRING static_scalar { addE("Se esperaba un '=' despues de T_STRING"); }
	|	declare_list ',' T_STRING static_scalar T_END { addE("Se esperaba un '=' despues de T_STRING"); return 0; }
	|	declare_list ',' '=' static_scalar { addE("Falta T_STRING antes del '='. Formato: T_STRING = static_scalar"); }
	|	declare_list ',' '=' static_scalar T_END { addE("Falta T_STRING antes del '='. Formato: T_STRING = static_scalar"); return 0; }
	|	declare_list ',' static_scalar '=' static_scalar { addE("Se esperaba T_STRING, no static_scalar. Formato: T_STRING = static_scalar"); }
	|	declare_list ',' static_scalar '=' static_scalar T_END { addE("Se esperaba T_STRING, no static_scalar. Formato: T_STRING = static_scalar"); return 0; }
	|	declare_list ',' T_STRING '=' static_scalar ',' T_END { addE("declare_list no puede terminar con ','."); return 0; }
;


static_scalar:
		common_scalar { addNT("common_scalar"); addLevel(); }
	|   T_STRING { addT("T_STRING"); addLevel(); }
	|	'+' static_scalar { addT("+"); addNT("static_scalar"); addLevel(); }
	|	'-' static_scalar { addT("+"); addNT("static_scalar"); addLevel(); }
	|	T_ARRAY '(' static_array_pair_list ')' { addT("T_ARRAY"); addT("("); addNT("static_array_pair_list"); addT(")"); addLevel(); }
	|	static_class_constant { addNT("static_class_constant"); addLevel(); }
	
	/*Reconocimiento de ERRORES más frecuentes desde aqui*/
	|	T_ARRAY { addE("Falta argumento de array. Formato T_ARRAY (...)"); }
	|	T_ARRAY '(' static_array_pair_list { addE("No se cerro T_ARRAY correctamente. Falta ')' al final."); }
	|	T_ARRAY static_array_pair_list ')' { addE("No se abrio T_ARRAY correctamente. Falta '(' al inicio."); }
;


common_scalar:
		T_LNUMBER  { addT("T_LNUMBER"); addLevel(); }
	|	T_DNUMBER  { addT("T_DNUMBER"); addLevel(); }
	|	T_CONSTANT_ENCAPSED_STRING { addT("T_CONSTANT_ENCAPSED_STRING"); addLevel(); }
	|	T_LINE  { addT("T_LINE"); addLevel(); }
	|	T_FILE  { addT("T_FILE"); addLevel(); }
	|	T_CLASS { addT("T_CLASS"); addLevel(); }
	|	T_METHOD { addT("T_METHOD"); addLevel(); }
	|	T_FUNC { addT("T_FUNC"); addLevel(); }
;

static_array_pair_list:
		static_array_pair { addNT("static_array_pair"); addLevel(); }
	|	static_array_pair_list ',' static_array_pair { addNT("static_array_pair_list"); addT(","); addNT("static_array_pair"); addLevel(); }
	|	static_array_pair_list ',' static_array_pair ',' { addNT("static_array_pair_list"); addT(","); addNT("static_array_pair"); addT(","); addLevel(); }
;

static_class_constant:
		T_STRING T_DOUBLE_TWO_POINTS T_STRING { addT("T_STRING"); addT("T_DOUBLE_TWO_POINTS"); addT("T_STRING"); addLevel(); }
;

static_array_pair:
		/* vacío */ { addT("T_EMPTY"); addLevel(); }
	|	static_scalar { addNT("static_scalar"); addLevel(); }
	|	static_scalar T_DOUBLE_ARROW static_scalar { addNT("static_scalar"); addT("T_DOUBLE_ARROW"); addNT("static_scalar"); addLevel(); }

%%

int yyerror(char *s) {
	error[found_errors] = (char*) malloc(strlen("Error desconocido: ") + strlen(s) + 1);
	strcpy(error[found_errors], "Error desconocido: ");
	strcat(error[found_errors], s);
	found_errors++;
	return 0;
}

int yywrap() {
	return 1;
}

void addT(char *t) {
	treeLevel[tLevel].token[tID].name = (char*) malloc(strlen(t) + 1);
	strcpy(treeLevel[tLevel].token[tID].name, t);
	//printf("%s(%d) ", treeLevel[tLevel].token[tID].name, tID);

	treeLevel[tLevel].token[tID++].no_terminal = 0;
	treeLevel[tLevel].cant_tokens++;
}

void addNT(char *t) {
	treeLevel[tLevel].token[tID].name = (char*) malloc(strlen(t) + 1);
	strcpy(treeLevel[tLevel].token[tID].name, t);

	treeLevel[tLevel].token[tID++].no_terminal = 1;
	treeLevel[tLevel].cant_tokens++;
}

void addLevel() {
	//treeLevel[tLevel].cant_tokens = tID;
	//printf("\n<cant_token: %d>\n", treeLevel[tLevel].cant_tokens);
	tID = 0;
	tLevel++;
}

void addE(char *e) {
	error[found_errors] = (char*) malloc(strlen(e) + 1);
	strcpy(error[found_errors++], e);
}

/* Funciones mas importantes para imprimir arbol sintactico y la tabla de simbolos */
//Imprime errores por consola
void printErrors() {
	int i;
	for(i=0; i<found_errors; i++) {
		printf("%d: %s\n", i+1, error[i]);
	}
}

// Imprime la tabla de simbolos generada en el analisis lexico (archivo declare_list.l, de flex)
void printSymbolTable() {
	int i;
	for(i=0; i<stID; i++) {
		printf("[%s]: %s\n", stToken[i], stValue[i]);
	}
}

// Arma el arbol. Coloca en la variable "level_ref" de los no terminales el nivel, es decir, el conjunto de simbolos al que hacen referencia para luego reemplazarlos.
int makeTree(int i) {
	int j;
	int found_no_terminals=0;
	for(j=treeLevel[i].cant_tokens-1; j>=0; --j) {
		if(treeLevel[i].token[j].no_terminal == 1) {
			found_no_terminals++;
			treeLevel[i].token[j].level_ref = i-found_no_terminals; //La raiz del arbol es el ultimo nivel agregado a la estructura, por lo que no es 0, asi que hay que invertir el orden en que se lee la estructura.
			//printf("Asignado %d a %s(%d)\n", treeLevel[i].token[j].level_ref, treeLevel[i].token[j].name, i);
			found_no_terminals += makeTree(i-found_no_terminals);
		}
	}
	return found_no_terminals;
}

// Imprime cada nivel del arbol, desarrollando desde la raiz hacia abajo (ramas)
int printTreeLevel(int n, int i) {
	int j;
	int printed_no_terminals = 0;
	for(j=0; j<treeLevel[n].cant_tokens; j++) {
		if(treeLevel[n].token[j].no_terminal) {
			printed_no_terminals++;
			if(i>0) {
				if(i == 1) { // Resalta los simbolso que se agregaron en reemplazo del no terminal encontrado.
					printf("{ ");
					printed_no_terminals += printTreeLevel(treeLevel[n].token[j].level_ref, i-1);
					printf("} ");
				}
				else {
					printed_no_terminals += printTreeLevel(treeLevel[n].token[j].level_ref, i-1);
				}
			}
			else {
				// Imprime los no terminales entre < >
				printf("<%s> ", treeLevel[n].token[j].name);
			}
		}
		else {
			printf("%s ", treeLevel[n].token[j].name);
		}
	}
	return printed_no_terminals;
}


// Imprime el arbol sintactico. Empieza por la raiz o primer nivel y va reemplazando los no terminales por el conjunto de simbolos que hacen referencia, los cuales derivan de este.
void printTree() {
	if(found_errors > 0) {
		printf("No se puede imprimir el arbol sintactico debido a que se encontraron errores.\n");
	}
	else {
		int fnt = makeTree(tLevel);
		int i = 0;
		for(i=0; ; i++) {
			if(printTreeLevel(tLevel, i) == fnt) {
				printf("\n");
				printTreeLevel(tLevel, i+1);
				printf("\n");
				printTreeLevel(tLevel, i+2);
				break;
			}
			printf("\n");
		}
	}
}

/* Guardar en HTML*/
// Funciones para imprimir en archivo HTML.
void printErrorsToHTML(FILE *htmlFile) {
	fprintf(htmlFile, "<h4>Se encontraron %d errores en el análisis.</h4>", found_errors);
	int i;
	fprintf(htmlFile, "<ol>");
	for(i=0; i<found_errors; i++) {
		fprintf(htmlFile, "<li>%s</li>", error[i]);
	}
	fprintf(htmlFile, "</ol>");
}

void printStatementToHTML(FILE *htmlFile) {
	int i;
	fprintf(htmlFile, "<ul><li>");
	for(i=0; i<stID; i++) {
		fprintf(htmlFile, "%s ", stValue[i]);
		if(strcmp(stValue[i], ",") == 0) {
			fprintf(htmlFile, "</li><li>");
		}
	}
	fprintf(htmlFile, "</li></ul>");
}

void printSymbolTableToHTML(FILE *htmlFile) {
	int i;
	for(i=0; i<stID; i++) {
		fprintf(htmlFile, "<tr><td>%s</td><td>%s</td></tr>", stToken[i], stValue[i]);
	}
}

int printTreeLevelToHTML(int n, int i, FILE *htmlFile) {
	int j;
	int printed_no_terminals = 0;
	for(j=0; j<treeLevel[n].cant_tokens; j++) {
		if(treeLevel[n].token[j].no_terminal) {
			printed_no_terminals++;
			if(i>0) {
				if(i == 1) { // Resalta los simbolso que se agregaron en reemplazo del no terminal encontrado.
					fprintf(htmlFile, "<i>");
					printed_no_terminals += printTreeLevelToHTML(treeLevel[n].token[j].level_ref, i-1, htmlFile);
					fprintf(htmlFile, "</i>");
				}
				else {
					printed_no_terminals += printTreeLevelToHTML(treeLevel[n].token[j].level_ref, i-1, htmlFile);
				}
			}
			else {
				// Imprime los no terminales entre < >
				fprintf(htmlFile, "<b>&lt;%s&gt;</b> ", treeLevel[n].token[j].name);
			}
		}
		else {
			fprintf(htmlFile, "%s ", treeLevel[n].token[j].name);
		}
	}
	return printed_no_terminals;
}

void printTreeToHTML(FILE *htmlFile) {
	if(found_errors > 0) {
		printf("No se puede imprimir el arbol sintactico debido a que se encontraron errores.\n");
	}
	else {
		int fnt = makeTree(tLevel);
		int i = 0;
		fprintf(htmlFile, "<ol>");
		for(i=0; ; i++) {
			fprintf(htmlFile, "<li>");
			if(printTreeLevelToHTML(tLevel, i, htmlFile) == fnt) {
				fprintf(htmlFile, "</li><li>");
				printTreeLevelToHTML(tLevel, i+1, htmlFile);
				fprintf(htmlFile, "</li></ol>");
				fprintf(htmlFile, "<h3>Cadena analizada</h3>");
				fprintf(htmlFile, "<p>");
				printTreeLevelToHTML(tLevel, i+2, htmlFile);
				fprintf(htmlFile, "</p>");
				break;
			}
			fprintf(htmlFile, "</li>");
			printf("\n");
		}
	}
}